#!/usr/bin/env tsx
/**
 * Google Calendar Integration Demo CLI
 * 
 * This script demonstrates the Google Calendar integration functionality
 * including authentication setup, task synchronization, and CRUD operations.
 */

import { PrismaClient } from '@prisma/client';
import { GoogleCalendarService } from '../src/services/google-calendar.js';
import dotenv from 'dotenv';
import readline from 'readline';

// Load environment variables
dotenv.config();

const prisma = new PrismaClient();
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Configuration
const config = {
  credentialsPath: process.env.GOOGLE_CREDENTIALS_PATH || './credentials.json',
  tokenPath: process.env.GOOGLE_TOKEN_PATH || './token.json',
  calendarId: process.env.GOOGLE_CALENDAR_ID || 'primary',
  scopes: [
    'https://www.googleapis.com/auth/calendar.events',
    'https://www.googleapis.com/auth/calendar'
  ]
};

const calendarService = new GoogleCalendarService(config, prisma);

function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupAuthentication() {
  console.log('\n=== THI·∫æT L·∫¨P X√ÅC TH·ª∞C GOOGLE CALENDAR ===');
  
  try {
    await calendarService.initialize();
    console.log('‚úÖ Google Calendar service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  C·∫ßn thi·∫øt l·∫≠p x√°c th·ª±c l·∫ßn ƒë·∫ßu...');
    
    const authUrl = calendarService.getAuthUrl();
    console.log('\n1. Truy c·∫≠p URL sau ƒë·ªÉ x√°c th·ª±c:');
    console.log(authUrl);
    console.log('\n2. Cho ph√©p ·ª©ng d·ª•ng truy c·∫≠p Google Calendar');
    console.log('3. Sao ch√©p m√£ x√°c th·ª±c t·ª´ URL callback');
    
    const code = await question('\nNh·∫≠p m√£ x√°c th·ª±c: ');
    
    try {
      await calendarService.handleAuthCode(code.trim());
      await calendarService.initialize();
      console.log('‚úÖ X√°c th·ª±c th√†nh c√¥ng! Google Calendar service ƒë√£ s·∫µn s√†ng.');
      return true;
    } catch (error) {
      console.error('‚ùå L·ªói x√°c th·ª±c:', error);
      return false;
    }
  }
}

async function createSampleTasks() {
  console.log('\n=== T·∫†O D·ªÆ LI·ªÜU M·∫™U ===');
  
  const sampleTasks = [
    {
      title: '√în t·∫≠p To√°n cao c·∫•p',
      description: 'Chu·∫©n b·ªã cho k·ª≥ thi cu·ªëi k·ª≥ - ch∆∞∆°ng vi ph√¢n t√≠ch ph√¢n',
      deadline: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days from now
      priority: 'high' as const,
      estimateMinutes: 120,
      status: 'todo' as const
    },
    {
      title: 'N·ªôp b√†i t·∫≠p L·∫≠p tr√¨nh Web',
      description: 'Ho√†n thi·ªán project React final',
      deadline: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days from now
      priority: 'medium' as const,
      estimateMinutes: 180,
      status: 'doing' as const
    },
    {
      title: 'ƒê·ªçc t√†i li·ªáu Machine Learning',
      description: 'ƒê·ªçc ch∆∞∆°ng 3-5 v·ªÅ Neural Networks',
      deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now
      priority: 'low' as const,
      estimateMinutes: 90,
      status: 'todo' as const
    }
  ];
  
  const createdTasks = [];
  for (const taskData of sampleTasks) {
    const task = await prisma.task.create({ data: taskData });
    createdTasks.push(task);
    console.log(`‚úÖ T·∫°o nhi·ªám v·ª•: ${task.title}`);
  }
  
  return createdTasks;
}

async function demonstrateCRUDOperations(tasks: any[]) {
  console.log('\n=== DEMO CRUD OPERATIONS V·ªöI GOOGLE CALENDAR ===');
  
  // Test 1: Create events in Google Calendar
  console.log('\n1. T·∫°o s·ª± ki·ªán Google Calendar t·ª´ nhi·ªám v·ª•...');
  for (const task of tasks) {
    try {
      const eventId = await calendarService.createEvent(task);
      console.log(`   ‚úÖ T·∫°o event ${eventId} cho task "${task.title}"`);
      await new Promise(resolve => setTimeout(resolve, 500)); // Rate limit protection
    } catch (error) {
      console.log(`   ‚ùå L·ªói t·∫°o event cho task "${task.title}":`, error);
    }
  }
  
  // Test 2: Update a task and sync to Google
  console.log('\n2. C·∫≠p nh·∫≠t nhi·ªám v·ª• v√† ƒë·ªìng b·ªô...');
  const taskToUpdate = tasks[0];
  const updatedTask = await prisma.task.update({
    where: { id: taskToUpdate.id },
    data: {
      title: taskToUpdate.title + ' (C·∫¨P NH·∫¨T)',
      priority: 'medium',
      estimateMinutes: 150
    }
  });
  
  try {
    await calendarService.updateEvent(updatedTask);
    console.log(`   ‚úÖ C·∫≠p nh·∫≠t event cho task "${updatedTask.title}"`);
  } catch (error) {
    console.log(`   ‚ùå L·ªói c·∫≠p nh·∫≠t event:`, error);
  }
  
  // Test 3: List events from Google Calendar
  console.log('\n3. L·∫•y danh s√°ch s·ª± ki·ªán t·ª´ Google Calendar...');
  try {
    const events = await calendarService.listEvents();
    console.log(`   ‚úÖ T√¨m th·∫•y ${events.length} s·ª± ki·ªán`);
    events.forEach(event => {
      if (event.extendedProperties?.private?.studyBuddyTaskId) {
        console.log(`   - ${event.summary} (Task ID: ${event.extendedProperties.private.studyBuddyTaskId})`);
      }
    });
  } catch (error) {
    console.log(`   ‚ùå L·ªói l·∫•y danh s√°ch events:`, error);
  }
  
  // Test 4: Full sync
  console.log('\n4. Th·ª±c hi·ªán ƒë·ªìng b·ªô to√†n b·ªô...');
  try {
    const syncStats = await calendarService.syncOnce();
    console.log(`   ‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng:`, syncStats);
  } catch (error) {
    console.log(`   ‚ùå L·ªói ƒë·ªìng b·ªô:`, error);
  }
  
  // Test 5: Delete events (cleanup)
  console.log('\n5. D·ªçn d·∫πp - x√≥a s·ª± ki·ªán test...');
  for (const task of tasks) {
    try {
      const fullTask = await prisma.task.findUnique({ where: { id: task.id } });
      if (fullTask) {
        await calendarService.deleteEvent(fullTask);
        console.log(`   ‚úÖ X√≥a event cho task "${fullTask.title}"`);
      }
      await new Promise(resolve => setTimeout(resolve, 500)); // Rate limit protection
    } catch (error) {
      console.log(`   ‚ùå L·ªói x√≥a event:`, error);
    }
  }
}

async function cleanupTasks(taskIds: string[]) {
  console.log('\n=== D·ªåN D·∫∏P D·ªÆ LI·ªÜU TEST ===');
  
  for (const id of taskIds) {
    await prisma.task.delete({ where: { id } });
    console.log(`‚úÖ X√≥a nhi·ªám v·ª• test: ${id}`);
  }
}

async function displayMenu() {
  console.log('\n=== GOOGLE CALENDAR INTEGRATION DEMO ===');
  console.log('1. Thi·∫øt l·∫≠p x√°c th·ª±c');
  console.log('2. T·∫°o d·ªØ li·ªáu m·∫´u v√† demo CRUD');
  console.log('3. Ki·ªÉm tra tr·∫°ng th√°i service');
  console.log('4. ƒê·ªìng b·ªô th·ªß c√¥ng');
  console.log('5. Tho√°t');
  
  return await question('\nCh·ªçn t√πy ch·ªçn (1-5): ');
}

async function checkServiceStatus() {
  console.log('\n=== KI·ªÇM TRA TR·∫†NG TH√ÅI ===');
  
  try {
    await calendarService.initialize();
    console.log('‚úÖ Google Calendar service: S·∫¥N S√ÄNG');
    console.log(`üìÅ Credentials: ${config.credentialsPath}`);
    console.log(`üîë Token: ${config.tokenPath}`);
    console.log(`üìÖ Calendar ID: ${config.calendarId}`);
  } catch (error) {
    console.log('‚ùå Google Calendar service: CH∆ØA S·∫¥N S√ÄNG');
    console.log('üí° H√£y ch·∫°y t√πy ch·ªçn 1 ƒë·ªÉ thi·∫øt l·∫≠p x√°c th·ª±c');
  }
}

async function manualSync() {
  console.log('\n=== ƒê·ªíNG B·ªò TH·ª¶ C√îNG ===');
  
  try {
    await calendarService.initialize();
    const stats = await calendarService.syncOnce();
    console.log('‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng:', stats);
  } catch (error) {
    console.log('‚ùå L·ªói ƒë·ªìng b·ªô:', error);
  }
}

async function main() {
  console.log('üöÄ StudyBuddy Google Calendar Integration Demo');
  console.log('===============================================');
  
  try {
    let running = true;
    
    while (running) {
      const choice = await displayMenu();
      
      switch (choice.trim()) {
        case '1':
          await setupAuthentication();
          break;
          
        case '2':
          console.log('\nƒê·∫£m b·∫£o ƒë√£ thi·∫øt l·∫≠p x√°c th·ª±c tr∆∞·ªõc...');
          try {
            await calendarService.initialize();
            const tasks = await createSampleTasks();
            await demonstrateCRUDOperations(tasks);
            
            const cleanup = await question('\nX√≥a d·ªØ li·ªáu test? (y/n): ');
            if (cleanup.toLowerCase() === 'y') {
              await cleanupTasks(tasks.map(t => t.id));
            }
          } catch (error) {
            console.log('‚ùå C·∫ßn thi·∫øt l·∫≠p x√°c th·ª±c tr∆∞·ªõc. Ch·∫°y t√πy ch·ªçn 1.');
          }
          break;
          
        case '3':
          await checkServiceStatus();
          break;
          
        case '4':
          await manualSync();
          break;
          
        case '5':
          running = false;
          console.log('üëã T·∫°m bi·ªát!');
          break;
          
        default:
          console.log('‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-5.');
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await prisma.$disconnect();
    rl.close();
  }
}

// Run the demo
main().catch(console.error);